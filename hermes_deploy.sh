#!/bin/bash
# DESC: D√©ploie ou ex√©cute automatiquement le script 'hermes_deploy'. Description √† compl√©ter.
#!/usr/bin/env bash

# --------------------------------------------------
# üïäÔ∏è Grimoire Herm√®s ‚Äî Script de D√©ploiement Ultime
# --------------------------------------------------
# Un d√©ploiement sans stress, r√©gulier, fiable.
# Par Tonton & GPT, pour l'excellence num√©rique.
# --------------------------------------------------

set -euo pipefail
IFS=$'\n\t'

#####################################
# Configuration
#####################################
PROJECT="LuxeEvents"
FRONT_DIR="/home/tontoncestcarre/luxeevents-frontend"
BACK_DIR="/home/tontoncestcarre/luxeevents-backend"
BACKUP_ROOT="/home/tontoncestcarre/backups"
GIT_BRANCH="main"
LOGFILE="${FRONT_DIR}/hermes_deploy.log"
NOW=$(date '+%Y-%m-%d_%H-%M-%S')

#####################################
# Fonctions
#####################################
log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOGFILE"; }
exit_on_error() { log "‚ùå Erreur survenue. Abandon."; exit 1; }
trap exit_on_error ERR

#####################################
# D√©but du chapitre Herm√®s
#####################################
log "=== Herm√®s Deploy Start: $NOW ==="

#####################################
# 1) Sauvegarde Complette
#####################################
BACKUP_PATH="$BACKUP_ROOT/${NOW}"
mkdir -p "$BACKUP_PATH"
log "[1] Sauvegarde Frontend ‚Üí $BACKUP_PATH/frontend"
cp -r "$FRONT_DIR" "$BACKUP_PATH/frontend"
log "[1] Sauvegarde Backend  ‚Üí $BACKUP_PATH/backend"
cp -r "$BACK_DIR" "$BACKUP_PATH/backend"

#####################################
# 2) Tests Automatis√©s
log "[2] V√©rification de la pr√©sence des scripts npm pour lint & unit tests"
cd "$FRONT_DIR"
if npm run | grep -q 'lint'; then
  log "[2] Lancement du lint"
  npm run lint
else
  log "[2] Script 'lint' non trouv√©, skipped"
fi
if npm run | grep -q 'test'; then
  log "[2] Lancement des tests unitaires"
  npm test -- --watchAll=false
else
  log "[2] Script 'test' non trouv√©, skipped"
fi

# 3) Build & Compilation
#####################################
log "[3] Build Frontend"
cd "$FRONT_DIR"
npm install
npm run build || exit_on_error

log "[3] Build Backend (si applicable)"
cd "$BACK_DIR"
npm install
npm run build || log "‚ö†Ô∏è Pas de build backend n√©cessaire"

#####################################
# 4) Git Commit & Push
#####################################
log "[4] Commit & push Git"
cd "$FRONT_DIR"
git add -A
if git diff --cached --quiet; then
  log "[4] Aucun changement √† pusher"
else
  git commit -m "‚öôÔ∏è Herm√®s Deploy $NOW"
  git push origin $GIT_BRANCH
fi

#####################################
# 5) D√©ploiement sur Vercel
#####################################
log "[5] D√©ploiement Vercel via GitHub Actions"
# (CI/CD d√©clench√© par push)

#####################################
# 6) Nettoyage post-build
#####################################
log "[6] Nettoyage node_modules et cache"
rm -rf "$FRONT_DIR/node_modules" "$BACK_DIR/node_modules"
rm -rf "$FRONT_DIR/.cache" "$BACK_DIR/.cache"

#####################################
# 7) Notification Finale
#####################################
log "[7] Notification Slack (via webhook)"
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/XXX/YYY/ZZZ"
payload="{\"text\":\"üöÄ $PROJECT d√©ploy√© avec succ√®s √† $NOW !\"}"
curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

#####################################
# Fin du d√©ploiement
#####################################
log "=== Herm√®s Deploy End: $(date '+%Y-%m-%d_%H:%M:%S') ==="

exit 0
