#!/usr/bin/env bash
export SLACK_WEBHOOK_URL="https://hooks.slack.com/services/XXX/YYY/ZZZ"
set -euo pipefail

# -------------------------------------------------------------------
# CONFIGURATION
# -------------------------------------------------------------------
CI_PROVIDER=${CI_PROVIDER:-vercel}           # "vercel" ou "netlify"
BUILD_DIR=dist                               # dossier de build Vite-SSG
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}   # URL du webhook Slack (optionnel)
PROJECT_NAME="LuxeEvents Front V1"

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
function notify_slack() {
  local status=$1 msg=$2 color=$3
  [[ -z "$SLACK_WEBHOOK_URL" ]] && return
  payload=$(jq -n \
    --arg title "[$PROJECT_NAME] $status" \
    --arg text "$msg" \
    --arg color "$color" \
    '{
       attachments:[{
         color: $color,
         title: $title,
         text: $text
       }]
    }')
  curl -s -X POST -H 'Content-type: application/json' \
       --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
}

trap 'notify_slack "‚ùå √âCHEC" "√âtape en erreur : $BASH_COMMAND" "danger"; exit 1' ERR

# -------------------------------------------------------------------
# 1. INSTALLATION
# -------------------------------------------------------------------
echo -e "\nüõ†Ô∏è  Installation des d√©pendances"
npm ci

# -------------------------------------------------------------------
# 2. LINT & FORMAT
# -------------------------------------------------------------------
echo -e "\nüìê Linting (ESLint)"
npx eslint "src/**/*.{js,jsx,ts,tsx}"

echo -e "\nüé® V√©rification du format (Prettier)"
npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"

# -------------------------------------------------------------------
# 3. TESTS
# -------------------------------------------------------------------
echo -e "\n‚úÖ Tests unitaires & couverture (Jest)"
if [[ -f jest.config.js ]]; then
  npx jest --coverage --passWithNoTests
else
  echo "‚ö†Ô∏è  Aucun fichier jest.config.js d√©tect√©, tests Jest saut√©s"
fi

# -------------------------------------------------------------------
# 4. SEO: sitemap & robots.txt
# -------------------------------------------------------------------
echo -e "\nüåê G√©n√©ration sitemap.xml"
if [[ -f scripts/generate-sitemap.js ]]; then
#!/usr/bin/env bash
set -euo pipefail

# -------------------------------------------------------------------
# CONFIGURATION
# -------------------------------------------------------------------
CI_PROVIDER=${CI_PROVIDER:-vercel}           # "vercel" ou "netlify"
BUILD_DIR=dist                               # dossier de build Vite-SSG
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}   # URL du webhook Slack (optionnel)
PROJECT_NAME="LuxeEvents Front V1"

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
function notify_slack() {
  local status=$1 msg=$2 color=$3
  [[ -z "$SLACK_WEBHOOK_URL" ]] && return
  payload=$(jq -n \
    --arg title "[$PROJECT_NAME] $status" \
    --arg text "$msg" \
    --arg color "$color" \
    '{
       attachments:[{
         color: $color,
         title: $title,
         text: $text
       }]
    }')
  curl -s -X POST -H 'Content-type: application/json' \
       --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
}

trap 'notify_slack "‚ùå √âCHEC" "√âtape en erreur : $BASH_COMMAND" "danger"; exit 1' ERR

# -------------------------------------------------------------------
# 1. INSTALLATION
# -------------------------------------------------------------------
echo -e "\nüõ†Ô∏è  Installation des d√©pendances"
npm ci
#!/usr/bin/env bash
set -euo pipefail

# -------------------------------------------------------------------
# CONFIGURATION
# -------------------------------------------------------------------
CI_PROVIDER=${CI_PROVIDER:-vercel}           # "vercel" ou "netlify"
BUILD_DIR=dist                               # dossier de build Vite-SSG
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}   # URL du webhook Slack (optionnel)
PROJECT_NAME="LuxeEvents Front V1"

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
function notify_slack() {
  local status=$1 msg=$2 color=$3
  [[ -z "$SLACK_WEBHOOK_URL" ]] && return
  payload=$(jq -n \
    --arg title "[$PROJECT_NAME] $status" \
    --arg text "$msg" \
    --arg color "$color" \
    '{
       attachments:[{
         color: $color,
         title: $title,
         text: $text
       }]
    }')
  curl -s -X POST -H 'Content-type: application/json' \
       --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
}

trap 'notify_slack "‚ùå √âCHEC" "√âtape en erreur : $BASH_COMMAND" "danger"; exit 1' ERR

# -------------------------------------------------------------------
# 1. INSTALLATION
# -------------------------------------------------------------------
echo -e "\nüõ†Ô∏è  Installation des d√©pendances"
npm ci

# -------------------------------------------------------------------
# 2. LINT & FORMAT
# -------------------------------------------------------------------
echo -e "\nüìê Linting (ESLint)"
npx eslint "src/**/*.{js,jsx,ts,tsx}"

echo -e "\nüé® V√©rification du format (Prettier)"
npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"
#!/usr/bin/env bash
set -euo pipefail

# -------------------------------------------------------------------
# CONFIGURATION
# -------------------------------------------------------------------
CI_PROVIDER=${CI_PROVIDER:-vercel}           # "vercel" ou "netlify"
BUILD_DIR=dist                               # dossier de build Vite-SSG
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}   # URL du webhook Slack (optionnel)
PROJECT_NAME="LuxeEvents Front V1"

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
function notify_slack() {
  local status=$1 msg=$2 color=$3
  [[ -z "$SLACK_WEBHOOK_URL" ]] && return
  payload=$(jq -n \
    --arg title "[$PROJECT_NAME] $status" \
    --arg text "$msg" \
    --arg color "$color" \
    '{
       attachments:[{
         color: $color,
         title: $title,
         text: $text
       }]
    }')
  curl -s -X POST -H 'Content-type: application/json' \
       --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
}

trap 'notify_slack "‚ùå √âCHEC" "√âtape en erreur : $BASH_COMMAND" "danger"; exit 1' ERR

# -------------------------------------------------------------------
# 1. INSTALLATION
# -------------------------------------------------------------------
echo -e "\nüõ†Ô∏è  Installation des d√©pendances"
npm ci

# -------------------------------------------------------------------
# 2. LINT & FORMAT
# -------------------------------------------------------------------
echo -e "\nüìê Linting (ESLint)"
npx eslint "src/**/*.{js,jsx,ts,tsx}"

echo -e "\nüé® V√©rification du format (Prettier)"
npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"

# -------------------------------------------------------------------
# 3. TESTS
# -------------------------------------------------------------------
echo -e "\n‚úÖ Tests unitaires & couverture (Jest)"
if [[ -f jest.config.js ]]; then
  npx jest --coverage --passWithNoTests
else
  echo "‚ö†Ô∏è  Aucun fichier jest.config.js d√©tect√©, tests Jest saut√©s"
fi

# -------------------------------------------------------------------
# 4. SEO: sitemap & robots.txt
# -------------------------------------------------------------------
echo -e "\nüåê G√©n√©ration sitemap.xml"
if [[ -f scripts/generate-sitemap.js ]]; then
  node scripts/generate-sitemap.js
else
  echo "‚ö†Ô∏è  script ./scripts/generate-sitemap.js introuvable, cr√©er votre propre g√©n√©rateur"
fi

echo -e "\nü§ñ G√©n√©ration robots.txt"
if [[ -f scripts/generate-robots.js ]]; then
  node scripts/generate-robots.js
else
  cat > public/robots.txt <<EOF
User-agent: *
Allow: /
Sitemap: https://votre-domaine.com/sitemap.xml
EOF
  echo "‚Üí public/robots.txt cr√©√© en fallback"
fi

# -------------------------------------------------------------------
# 5. AUDIT ACCESSIBILIT√â & PERF
# -------------------------------------------------------------------
echo -e "\nüîç Audit Lighthouse CI"
if command -v lhci &>/dev/null; then
  lhci autorun --config=./lighthouserc.js
else
  echo "‚ö†Ô∏è  lhci non install√© globalement, installez le paquet @lhci/cli"
fi

# -------------------------------------------------------------------
# 6. BUILD VITE-SSG
# -------------------------------------------------------------------
echo -e "\n‚öôÔ∏è  Build production (Vite-SSG)"
npm run build

# -------------------------------------------------------------------
# 7. D√âPLOIEMENT
# -------------------------------------------------------------------
echo -e "\nüöÄ D√©ploiement sur $CI_PROVIDER"
if [[ "$CI_PROVIDER" == "vercel" ]]; then
  vercel --prod --confirm
elif [[ "$CI_PROVIDER" == "netlify" ]]; then
  netlify deploy --dir=$BUILD_DIR --prod
else
  echo "‚ùå Fournisseur CI invalide : $CI_PROVIDER"
  exit 1
fi

notify_slack "‚úÖ Succ√®s" "La front v1 de LuxeEvents est en ligne !" "good"
echo -e "\nüéâ D√©ploiement termin√© ‚Äî en route vers le tapis rouge ! üé¨\n"

Points √† v√©rifier / ajuster

    Permissions
    Rendre le script ex√©cutable :

chmod +x deploy-ssg.sh

Scripts dans package.json
Vous pouvez ajouter ces scripts pour simplifier :

{
  "scripts": {
    "lint": "eslint 'src/**/*.{js,jsx,ts,tsx}'",
    "format:check": "prettier --check 'src/**/*.{js,jsx,ts,tsx,css,md}'",
    "test": "jest",
    "generate:sitemap": "node scripts/generate-sitemap.js",
    "generate:robots": "node scripts/generate-robots.js",
    "build": "vite-ssg build"
  }
}
# -------------------------------------------------------------------
# 3. TESTS
# -------------------------------------------------------------------
echo -e "\n‚úÖ Tests unitaires & couverture (Jest)"
if [[ -f jest.config.js ]]; then
  npx jest --coverage --passWithNoTests
else
  echo "‚ö†Ô∏è  Aucun fichier jest.config.js d√©tect√©, tests Jest saut√©s"
fi

# -------------------------------------------------------------------
# 4. SEO: sitemap & robots.txt
# -------------------------------------------------------------------
echo -e "\nüåê G√©n√©ration sitemap.xml"
if [[ -f scripts/generate-sitemap.js ]]; then
  node scripts/generate-sitemap.js
else
  echo "‚ö†Ô∏è  script ./scripts/generate-sitemap.js introuvable, cr√©er votre propre g√©n√©rateur"
fi

echo -e "\nü§ñ G√©n√©ration robots.txt"
if [[ -f scripts/generate-robots.js ]]; then
  node scripts/generate-robots.js
else
  cat > public/robots.txt <<EOF
User-agent: *
Allow: /
Sitemap: https://votre-domaine.com/sitemap.xml
EOF
  echo "‚Üí public/robots.txt cr√©√© en fallback"
fi

# -------------------------------------------------------------------
# 5. AUDIT ACCESSIBILIT√â & PERF
# -------------------------------------------------------------------
echo -e "\nüîç Audit Lighthouse CI"
if command -v lhci &>/dev/null; then
  lhci autorun --config=./lighthouserc.js
else
  echo "‚ö†Ô∏è  lhci non install√© globalement, installez le paquet @lhci/cli"
fi

# -------------------------------------------------------------------
# 6. BUILD VITE-SSG
# -------------------------------------------------------------------
echo -e "\n‚öôÔ∏è  Build production (Vite-SSG)"
npm run build

# -------------------------------------------------------------------
# 7. D√âPLOIEMENT
# -------------------------------------------------------------------
echo -e "\nüöÄ D√©ploiement sur $CI_PROVIDER"
if [[ "$CI_PROVIDER" == "vercel" ]]; then
  vercel --prod --confirm
elif [[ "$CI_PROVIDER" == "netlify" ]]; then
  netlify deploy --dir=$BUILD_DIR --prod
else
  echo "‚ùå Fournisseur CI invalide : $CI_PROVIDER"
  exit 1
fi

notify_slack "‚úÖ Succ√®s" "La front v1 de LuxeEvents est en ligne !" "good"
echo -e "\nüéâ D√©ploiement termin√© ‚Äî en route vers le tapis rouge ! üé¨\n"

Points √† v√©rifier / ajuster

    Permissions
    Rendre le script ex√©cutable :

chmod +x deploy-ssg.sh

Scripts dans package.json
Vous pouvez ajouter ces scripts pour simplifier :

{
  "scripts": {
    "lint": "eslint 'src/**/*.{js,jsx,ts,tsx}'",
    "format:check": "prettier --check 'src/**/*.{js,jsx,ts,tsx,css,md}'",
    "test": "jest",
    "generate:sitemap": "node scripts/generate-sitemap.js",
    "generate:robots": "node scripts/generate-robots.js",
    "build": "vite-ssg build"
  }
}
# -------------------------------------------------------------------
# 2. LINT & FORMAT
# -------------------------------------------------------------------
echo -e "\nüìê Linting (ESLint)"
npx eslint "src/**/*.{js,jsx,ts,tsx}"

echo -e "\nüé® V√©rification du format (Prettier)"
npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"

# -------------------------------------------------------------------
# 3. TESTS
# -------------------------------------------------------------------
echo -e "\n‚úÖ Tests unitaires & couverture (Jest)"
if [[ -f jest.config.js ]]; then
  npx jest --coverage --passWithNoTests
else
  echo "‚ö†Ô∏è  Aucun fichier jest.config.js d√©tect√©, tests Jest saut√©s"
fi

# -------------------------------------------------------------------
# 4. SEO: sitemap & robots.txt
# -------------------------------------------------------------------
echo -e "\nüåê G√©n√©ration sitemap.xml"
if [[ -f scripts/generate-sitemap.js ]]; then
  node scripts/generate-sitemap.js
else
  echo "‚ö†Ô∏è  script ./scripts/generate-sitemap.js introuvable, cr√©er votre propre g√©n√©rateur"
fi

echo -e "\nü§ñ G√©n√©ration robots.txt"
if [[ -f scripts/generate-robots.js ]]; then
  node scripts/generate-robots.js
else
  cat > public/robots.txt <<EOF
User-agent: *
A#!/usr/bin/env bash
set -euo pipefail

# -------------------------------------------------------------------
# CONFIGURATION
# -------------------------------------------------------------------
CI_PROVIDER=${CI_PROVIDER:-vercel}           # "vercel" ou "netlify"
BUILD_DIR=dist                               # dossier de build Vite-SSG
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-""}   # URL du webhook Slack (optionnel)
PROJECT_NAME="LuxeEvents Front V1"

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
function notify_slack() {
  local status=$1 msg=$2 color=$3
  [[ -z "$SLACK_WEBHOOK_URL" ]] && return
  payload=$(jq -n \
    --arg title "[$PROJECT_NAME] $status" \
    --arg text "$msg" \
    --arg color "$color" \
    '{
       attachments:[{
         color: $color,
         title: $title,
         text: $text
       }]
    }')
  curl -s -X POST -H 'Content-type: application/json' \
       --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
}

trap 'notify_slack "‚ùå √âCHEC" "√âtape en erreur : $BASH_COMMAND" "danger"; exit 1' ERR

# -------------------------------------------------------------------
# 1. INSTALLATION
# -------------------------------------------------------------------
echo -e "\nüõ†Ô∏è  Installation des d√©pendances"
npm ci

# -------------------------------------------------------------------
# 2. LINT & FORMAT
# -------------------------------------------------------------------
echo -e "\nüìê Linting (ESLint)"
npx eslint "src/**/*.{js,jsx,ts,tsx}"

echo -e "\nüé® V√©rification du format (Prettier)"
npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"

# -------------------------------------------------------------------
# 3. TESTS
# -------------------------------------------------------------------
echo -e "\n‚úÖ Tests unitaires & couverture (Jest)"
if [[ -f jest.config.js ]]; then
  npx jest --coverage --passWithNoTests
else
  echo "‚ö†Ô∏è  Aucun fichier jest.config.js d√©tect√©, tests Jest saut√©s"
fi

# -------------------------------------------------------------------
# 4. SEO: sitemap & robots.txt
# -------------------------------------------------------------------
echo -e "\nüåê G√©n√©ration sitemap.xml"
if [[ -f scripts/generate-sitemap.js ]]; then
  node scripts/generate-sitemap.js
else
  echo "‚ö†Ô∏è  script ./scripts/generate-sitemap.js introuvable, cr√©er votre propre g√©n√©rateur"
fi

echo -e "\nü§ñ G√©n√©ration robots.txt"
if [[ -f scripts/generate-robots.js ]]; then
  node scripts/generate-robots.js
else
  cat > public/robots.txt <<EOF
User-agent: *
Allow: /
Sitemap: https://votre-domaine.com/sitemap.xml
EOF
  echo "‚Üí public/robots.txt cr√©√© en fallback"
fi

# -------------------------------------------------------------------
# 5. AUDIT ACCESSIBILIT√â & PERF
# -------------------------------------------------------------------
echo -e "\nüîç Audit Lighthouse CI"
if command -v lhci &>/dev/null; then
  lhci autorun --config=./lighthouserc.js
else
  echo "‚ö†Ô∏è  lhci non install√© globalement, installez le paquet @lhci/cli"
fi

# -------------------------------------------------------------------
# 6. BUILD VITE-SSG
# -------------------------------------------------------------------
echo -e "\n‚öôÔ∏è  Build production (Vite-SSG)"
npm run build

# -------------------------------------------------------------------
# 7. D√âPLOIEMENT
# -------------------------------------------------------------------
echo -e "\nüöÄ D√©ploiement sur $CI_PROVIDER"
if [[ "$CI_PROVIDER" == "vercel" ]]; then
  vercel --prod --confirm
elif [[ "$CI_PROVIDER" == "netlify" ]]; then
  netlify deploy --dir=$BUILD_DIR --prod
else
  echo "‚ùå Fournisseur CI invalide : $CI_PROVIDER"
  exit 1
fi

notify_slack "‚úÖ Succ√®s" "La front v1 de LuxeEvents est en ligne !" "good"
echo -e "\nüéâ D√©ploiement termin√© ‚Äî en route vers le tapis rouge ! üé¨\n"

Points √† v√©rifier / ajuster

    Permissions
    Rendre le script ex√©cutable :

chmod +x deploy-ssg.sh

Scripts dans package.json
Vous pouvez ajouter ces scripts pour simplifier :

{
  "scripts": {
    "lint": "eslint 'src/**/*.{js,jsx,ts,tsx}'",
    "format:check": "prettier --check 'src/**/*.{js,jsx,ts,tsx,css,md}'",
    "test": "jest",
    "generate:sitemap": "node scripts/generate-sitemap.js",
    "generate:robots": "node scripts/generate-robots.js",
    "build": "vite-ssg build"
  }
}llow: /
Sitemap: https://votre-domaine.com/sitemap.xml
EOF
  echo "‚Üí public/robots.txt cr√©√© en fallback"
fi

# -------------------------------------------------------------------
# 5. AUDIT ACCESSIBILIT√â & PERF
# -------------------------------------------------------------------
echo -e "\nüîç Audit Lighthouse CI"
if command -v lhci &>/dev/null; then
  lhci autorun --config=./lighthouserc.js
else
  echo "‚ö†Ô∏è  lhci non install√© globalement, installez le paquet @lhci/cli"
fi

# -------------------------------------------------------------------
# 6. BUILD VITE-SSG
# -------------------------------------------------------------------
echo -e "\n‚öôÔ∏è  Build production (Vite-SSG)"
npm run build

# -------------------------------------------------------------------
# 7. D√âPLOIEMENT
# -------------------------------------------------------------------
echo -e "\nüöÄ D√©ploiement sur $CI_PROVIDER"
if [[ "$CI_PROVIDER" == "vercel" ]]; then
  vercel --prod --confirm
elif [[ "$CI_PROVIDER" == "netlify" ]]; then
  netlify deploy --dir=$BUILD_DIR --prod
else
  echo "‚ùå Fournisseur CI invalide : $CI_PROVIDER"
  exit 1
fi

notify_slack "‚úÖ Succ√®s" "La front v1 de LuxeEvents est en ligne !" "good"
echo -e "\nüéâ D√©ploiement termin√© ‚Äî en route vers le tapis rouge ! üé¨\n"

Points √† v√©rifier / ajuster

    Permissions
    Rendre le script ex√©cutable :

chmod +x deploy-ssg.sh

Scripts dans package.json
Vous pouvez ajouter ces scripts pour simplifier :

{
  "scripts": {
    "lint": "eslint 'src/**/*.{js,jsx,ts,tsx}'",
    "format:check": "prettier --check 'src/**/*.{js,jsx,ts,tsx,css,md}'",
    "test": "jest",
    "generate:sitemap": "node scripts/generate-sitemap.js",
    "generate:robots": "node scripts/generate-robots.js",
    "build": "vite-ssg build"
  }
}  node scripts/generate-sitemap.js
else
  echo "‚ö†Ô∏è  script ./scripts/generate-sitemap.js introuvable, cr√©er votre propre g√©n√©rateur"
fi

echo -e "\nü§ñ G√©n√©ration robots.txt"
if [[ -f scripts/generate-robots.js ]]; then
  node scripts/generate-robots.js
else
  cat > public/robots.txt <<EOF
User-agent: *
Allow: /
Sitemap: https://votre-domaine.com/sitemap.xml
EOF
  echo "‚Üí public/robots.txt cr√©√© en fallback"
fi

# -------------------------------------------------------------------
# 5. AUDIT ACCESSIBILIT√â & PERF
# -------------------------------------------------------------------
echo -e "\nüîç Audit Lighthouse CI"
if command -v lhci &>/dev/null; then
  lhci autorun --config=./lighthouserc.js
else
  echo "‚ö†Ô∏è  lhci non install√© globalement, installez le paquet @lhci/cli"
fi

# -------------------------------------------------------------------
# 6. BUILD VITE-SSG
# -------------------------------------------------------------------
echo -e "\n‚öôÔ∏è  Build production (Vite-SSG)"
npm run build

# -------------------------------------------------------------------
# 7. D√âPLOIEMENT
# -------------------------------------------------------------------
echo -e "\nüöÄ D√©ploiement sur $CI_PROVIDER"
if [[ "$CI_PROVIDER" == "vercel" ]]; then
  vercel --prod --confirm
elif [[ "$CI_PROVIDER" == "netlify" ]]; then
  netlify deploy --dir=$BUILD_DIR --prod
else
  echo "‚ùå Fournisseur CI invalide : $CI_PROVIDER"
  exit 1
fi

notify_slack "‚úÖ Succ√®s" "La front v1 de LuxeEvents est en ligne !" "good"
echo -e "\nüéâ D√©ploiement termin√© ‚Äî en route vers le tapis rouge ! üé¨\n"
