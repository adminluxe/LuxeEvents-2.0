import {
  require_lottie
} from "./chunk-VGOV5ZNI.js";
import {
  require_react
} from "./chunk-H77V45OM.js";
import {
  __commonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/es6/react.js
var require_react2 = __commonJS({
  "node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/es6/react.js"(exports, module) {
    "use strict";
    module.exports = function equal2(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal2(a[i], b[i])) return false;
          return true;
        }
        if (a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          for (i of a.entries())
            if (!b.has(i[0])) return false;
          for (i of a.entries())
            if (!equal2(i[1], b.get(i[0]))) return false;
          return true;
        }
        if (a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          for (i of a.entries())
            if (!b.has(i[0])) return false;
          return true;
        }
        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          }
          if (!equal2(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/index.js
var require_rfdc = __commonJS({
  "node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/index.js"(exports, module) {
    "use strict";
    module.exports = rfdc;
    function copyBuffer(cur) {
      if (cur instanceof Buffer) {
        return Buffer.from(cur);
      }
      return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);
    }
    function rfdc(opts) {
      opts = opts || {};
      if (opts.circles) return rfdcCircles(opts);
      const constructorHandlers = /* @__PURE__ */ new Map();
      constructorHandlers.set(Date, (o) => new Date(o));
      constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));
      constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));
      if (opts.constructorHandlers) {
        for (const handler2 of opts.constructorHandlers) {
          constructorHandlers.set(handler2[0], handler2[1]);
        }
      }
      let handler = null;
      return opts.proto ? cloneProto : clone2;
      function cloneArray(a, fn) {
        const keys = Object.keys(a);
        const a2 = new Array(keys.length);
        for (let i = 0; i < keys.length; i++) {
          const k = keys[i];
          const cur = a[k];
          if (typeof cur !== "object" || cur === null) {
            a2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            a2[k] = handler(cur, fn);
          } else if (ArrayBuffer.isView(cur)) {
            a2[k] = copyBuffer(cur);
          } else {
            a2[k] = fn(cur);
          }
        }
        return a2;
      }
      function clone2(o) {
        if (typeof o !== "object" || o === null) return o;
        if (Array.isArray(o)) return cloneArray(o, clone2);
        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
          return handler(o, clone2);
        }
        const o2 = {};
        for (const k in o) {
          if (Object.hasOwnProperty.call(o, k) === false) continue;
          const cur = o[k];
          if (typeof cur !== "object" || cur === null) {
            o2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            o2[k] = handler(cur, clone2);
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            o2[k] = clone2(cur);
          }
        }
        return o2;
      }
      function cloneProto(o) {
        if (typeof o !== "object" || o === null) return o;
        if (Array.isArray(o)) return cloneArray(o, cloneProto);
        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
          return handler(o, cloneProto);
        }
        const o2 = {};
        for (const k in o) {
          const cur = o[k];
          if (typeof cur !== "object" || cur === null) {
            o2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            o2[k] = handler(cur, cloneProto);
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            o2[k] = cloneProto(cur);
          }
        }
        return o2;
      }
    }
    function rfdcCircles(opts) {
      const refs = [];
      const refsNew = [];
      const constructorHandlers = /* @__PURE__ */ new Map();
      constructorHandlers.set(Date, (o) => new Date(o));
      constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));
      constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));
      if (opts.constructorHandlers) {
        for (const handler2 of opts.constructorHandlers) {
          constructorHandlers.set(handler2[0], handler2[1]);
        }
      }
      let handler = null;
      return opts.proto ? cloneProto : clone2;
      function cloneArray(a, fn) {
        const keys = Object.keys(a);
        const a2 = new Array(keys.length);
        for (let i = 0; i < keys.length; i++) {
          const k = keys[i];
          const cur = a[k];
          if (typeof cur !== "object" || cur === null) {
            a2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            a2[k] = handler(cur, fn);
          } else if (ArrayBuffer.isView(cur)) {
            a2[k] = copyBuffer(cur);
          } else {
            const index = refs.indexOf(cur);
            if (index !== -1) {
              a2[k] = refsNew[index];
            } else {
              a2[k] = fn(cur);
            }
          }
        }
        return a2;
      }
      function clone2(o) {
        if (typeof o !== "object" || o === null) return o;
        if (Array.isArray(o)) return cloneArray(o, clone2);
        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
          return handler(o, clone2);
        }
        const o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for (const k in o) {
          if (Object.hasOwnProperty.call(o, k) === false) continue;
          const cur = o[k];
          if (typeof cur !== "object" || cur === null) {
            o2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            o2[k] = handler(cur, clone2);
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            const i = refs.indexOf(cur);
            if (i !== -1) {
              o2[k] = refsNew[i];
            } else {
              o2[k] = clone2(cur);
            }
          }
        }
        refs.pop();
        refsNew.pop();
        return o2;
      }
      function cloneProto(o) {
        if (typeof o !== "object" || o === null) return o;
        if (Array.isArray(o)) return cloneArray(o, cloneProto);
        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {
          return handler(o, cloneProto);
        }
        const o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for (const k in o) {
          const cur = o[k];
          if (typeof cur !== "object" || cur === null) {
            o2[k] = cur;
          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
            o2[k] = handler(cur, cloneProto);
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            const i = refs.indexOf(cur);
            if (i !== -1) {
              o2[k] = refsNew[i];
            } else {
              o2[k] = cloneProto(cur);
            }
          }
        }
        refs.pop();
        refsNew.pop();
        return o2;
      }
    }
  }
});

// node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/default.js
var require_default = __commonJS({
  "node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/default.js"(exports, module) {
    "use strict";
    module.exports = require_rfdc()();
  }
});

// node_modules/.pnpm/react-lottie-player@2.1.0_react@18.3.1/node_modules/react-lottie-player/dist/LottiePlayer.modern.js
var import_lottie_web = __toESM(require_lottie());
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react2());
var import_default = __toESM(require_default());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var emptyObject = {};
var noOp = function noOp2() {
  return void 0;
};
var makeLottiePlayer = function makeLottiePlayer2(_ref) {
  var loadAnimation = _ref.loadAnimation;
  var Lottie = (0, import_react.memo)((0, import_react.forwardRef)(function(params, forwardedRef) {
    var _params$play = params.play, play = _params$play === void 0 ? null : _params$play, _params$speed = params.speed, speed = _params$speed === void 0 ? 1 : _params$speed, _params$direction = params.direction, direction = _params$direction === void 0 ? 1 : _params$direction, _params$segments = params.segments, segmentsIn = _params$segments === void 0 ? null : _params$segments, _params$goTo = params.goTo, goTo = _params$goTo === void 0 ? null : _params$goTo, _params$useSubframes = params.useSubframes, useSubframes = _params$useSubframes === void 0 ? true : _params$useSubframes, _params$renderer = params.renderer, renderer = _params$renderer === void 0 ? "svg" : _params$renderer, _params$loop = params.loop, loop = _params$loop === void 0 ? true : _params$loop, _params$rendererSetti = params.rendererSettings, rendererSettingsIn = _params$rendererSetti === void 0 ? emptyObject : _params$rendererSetti, audioFactory = params.audioFactory, _params$onLoad = params.onLoad, onLoad = _params$onLoad === void 0 ? noOp : _params$onLoad, _params$onComplete = params.onComplete, onComplete = _params$onComplete === void 0 ? noOp : _params$onComplete, _params$onLoopComplet = params.onLoopComplete, onLoopComplete = _params$onLoopComplet === void 0 ? noOp : _params$onLoopComplet, _params$onEnterFrame = params.onEnterFrame, onEnterFrame = _params$onEnterFrame === void 0 ? noOp : _params$onEnterFrame, _params$onSegmentStar = params.onSegmentStart, onSegmentStart = _params$onSegmentStar === void 0 ? noOp : _params$onSegmentStar, props = _objectWithoutPropertiesLoose(params, ["play", "speed", "direction", "segments", "goTo", "useSubframes", "renderer", "loop", "rendererSettings", "audioFactory", "onLoad", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart"]);
    var propsFiltered = props;
    var animationData;
    var path;
    if ("animationData" in props) {
      var _props = props;
      animationData = _props.animationData;
      propsFiltered = _objectWithoutPropertiesLoose(_props, ["animationData"]);
    }
    if ("path" in props) {
      var _props2 = props;
      path = _props2.path;
      propsFiltered = _objectWithoutPropertiesLoose(_props2, ["path"]);
    }
    var animElementRef = (0, import_react.useRef)(null);
    var animRef = (0, import_react.useRef)();
    var getAnim = (0, import_react.useCallback)(function() {
      if (animRef.current == null) throw new Error("Lottie ref is not set");
      return animRef.current;
    }, []);
    var _useState = (0, import_react.useState)(false), ready = _useState[0], setReady = _useState[1];
    var _useState2 = (0, import_react.useState)(segmentsIn), segments = _useState2[0], setSegments = _useState2[1];
    (0, import_react.useEffect)(function() {
      if (!(0, import_react2.default)(segments, segmentsIn)) setSegments(segmentsIn);
    }, [segmentsIn, segments]);
    var _useState3 = (0, import_react.useState)(rendererSettingsIn), rendererSettings = _useState3[0], setRendererSettings = _useState3[1];
    (0, import_react.useEffect)(function() {
      if (!(0, import_react2.default)(rendererSettings, rendererSettingsIn)) setRendererSettings(rendererSettingsIn);
    }, [rendererSettingsIn, rendererSettings]);
    (0, import_react.useEffect)(function() {
      return function() {
        return getAnim().removeEventListener("complete", onComplete);
      };
    }, [getAnim, onComplete]);
    (0, import_react.useEffect)(function() {
      return function() {
        return getAnim().removeEventListener("loopComplete", onLoopComplete);
      };
    }, [getAnim, onLoopComplete]);
    (0, import_react.useEffect)(function() {
      return function() {
        return getAnim().removeEventListener("enterFrame", onEnterFrame);
      };
    }, [getAnim, onEnterFrame]);
    (0, import_react.useEffect)(function() {
      return function() {
        return getAnim().removeEventListener("segmentStart", onSegmentStart);
      };
    }, [getAnim, onSegmentStart]);
    (0, import_react.useEffect)(function() {
      return function() {
        return getAnim().removeEventListener("DOMLoaded", onLoad);
      };
    }, [getAnim, onLoad]);
    var setLottieRefs = (0, import_react.useCallback)(function(newRef) {
      animRef.current = newRef;
      if (typeof forwardedRef === "function") {
        forwardedRef(newRef);
      } else if (forwardedRef !== void 0 && forwardedRef !== null) {
        forwardedRef.current = newRef;
      }
    }, [forwardedRef]);
    (0, import_react.useEffect)(function() {
      function parseAnimationData() {
        if (animationData == null || typeof animationData !== "object") return animationData;
        if ("default" in animationData && typeof animationData["default"] === "object") {
          return (0, import_default.default)(animationData["default"]);
        }
        return (0, import_default.default)(animationData);
      }
      if (animElementRef.current == null) throw new Error("animElementRef is not set");
      var lottie2 = loadAnimation(_extends({
        animationData: parseAnimationData(),
        path,
        container: animElementRef.current,
        renderer,
        loop: false,
        autoplay: false,
        rendererSettings
      }, audioFactory ? {
        audioFactory
      } : {}));
      setLottieRefs(lottie2);
      var onDomLoaded = function onDomLoaded2() {
        return setReady(true);
      };
      getAnim().addEventListener("DOMLoaded", onDomLoaded);
      return function() {
        getAnim().removeEventListener("DOMLoaded", onDomLoaded);
        setReady(false);
        getAnim().destroy();
        setLottieRefs(void 0);
      };
    }, [loop, renderer, rendererSettings, animationData, path, audioFactory, setLottieRefs, getAnim]);
    (0, import_react.useEffect)(function() {
      getAnim().addEventListener("DOMLoaded", onLoad);
    }, [getAnim, onLoad]);
    (0, import_react.useEffect)(function() {
      getAnim().addEventListener("complete", onComplete);
    }, [getAnim, onComplete]);
    (0, import_react.useEffect)(function() {
      getAnim().addEventListener("loopComplete", onLoopComplete);
    }, [getAnim, onLoopComplete]);
    (0, import_react.useEffect)(function() {
      getAnim().addEventListener("enterFrame", onEnterFrame);
    }, [getAnim, onEnterFrame]);
    (0, import_react.useEffect)(function() {
      getAnim().addEventListener("segmentStart", onSegmentStart);
    }, [getAnim, onSegmentStart]);
    (0, import_react.useEffect)(function() {
      if (!ready) return;
      getAnim().loop = loop;
    }, [ready, loop, getAnim]);
    var wasPlayingSegmentsRef = (0, import_react.useRef)(false);
    (0, import_react.useEffect)(function() {
      if (!ready) return;
      function playReverse(lastFrame2) {
        getAnim().goToAndPlay(lastFrame2, true);
        getAnim().setDirection(direction);
      }
      if (play === true) {
        var force = true;
        if (segments) {
          getAnim().playSegments(segments, force);
          wasPlayingSegmentsRef.current = true;
          if (direction === -1) {
            var lastFrame = typeof segments[1] === "number" ? segments[1] : segments[1][1];
            playReverse(lastFrame);
          }
        } else {
          if (wasPlayingSegmentsRef.current) getAnim().resetSegments(force);
          wasPlayingSegmentsRef.current = false;
          if (direction === -1) {
            var _lastFrame = getAnim().getDuration(true);
            playReverse(_lastFrame);
          } else {
            getAnim().play();
          }
        }
      } else if (play === false) {
        getAnim().pause();
      }
    }, [play, segments, ready, direction, getAnim]);
    (0, import_react.useEffect)(function() {
      if (!ready) return;
      if (Number.isNaN(speed)) return;
      getAnim().setSpeed(speed);
    }, [speed, ready, getAnim]);
    (0, import_react.useEffect)(function() {
      if (!ready) return;
      getAnim().setDirection(direction);
    }, [direction, getAnim, ready]);
    (0, import_react.useEffect)(function() {
      if (!ready) return;
      if (goTo == null) return;
      var isFrame = true;
      if (play) getAnim().goToAndPlay(goTo, isFrame);
      else getAnim().goToAndStop(goTo, isFrame);
    }, [getAnim, goTo, play, ready]);
    (0, import_react.useEffect)(function() {
      if (getAnim().setSubframe) getAnim().setSubframe(useSubframes);
    }, [getAnim, useSubframes]);
    return import_react.default.createElement("div", _extends({}, propsFiltered, {
      ref: animElementRef
    }));
  }));
  return Lottie;
};
var LottiePlayer = makeLottiePlayer(import_lottie_web.default);
var LottiePlayer_modern_default = LottiePlayer;
export {
  LottiePlayer_modern_default as default
};
//# sourceMappingURL=react-lottie-player.js.map
